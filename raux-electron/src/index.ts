import { app } from 'electron';
import { logInfo, logError } from './logger';
import { getAppInstallDir, checkAndHandleAutoLaunchPrevention, isInstallationComplete } from './envUtils';
import { handleSquirrelEvent } from './squirrelEvents';
import { rauxProcessManager } from './rauxProcessManager';
import { lemonadeProcessManager } from './lemonadeProcessManager';
import { setTimeout } from 'timers';
import { python } from './pythonExec';
import { raux } from './rauxSetup';
import { IPCManager } from './ipc/ipcManager';
import { WindowManager } from './windowManager';
import { IPCChannels } from './ipc/ipcChannels';
import { lemonadeStatusMonitor } from './lemonadeStatusMonitor';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const RAUX_URL = 'http://localhost:8080';

// Check if we're in hybrid mode (with Lemonade integration)
const isHybridMode = (): boolean => {
  // Check if GAIA_MODE environment variable is set to HYBRID
  const gaiaMode = process.env.GAIA_MODE;
  if (gaiaMode === 'HYBRID') {
    return true;
  }
  
  // If no explicit mode set, check if Lemonade is available
  // This logic matches the one in rauxSetup.ts
  return false; // We'll do runtime detection in startServices
};

// Start both RAUX and Lemonade services if needed
const startServices = async (): Promise<void> => {
  try {
    // Check if we should start Lemonade (hybrid mode)
    const shouldStartLemonade = isHybridMode() || await lemonadeProcessManager.isLemonadeAvailable();
    
    if (shouldStartLemonade) {
      logInfo('Hybrid mode detected - starting Lemonade server...');
      ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Starting Lemonade Server...' });
      
      const lemonadeStarted = await lemonadeProcessManager.startLemonade();
      if (lemonadeStarted) {
        logInfo('Lemonade server started successfully');
        ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'success', message: 'Lemonade Server ready.' });
      } else {
        logInfo('Failed to start Lemonade server, continuing with RAUX only');
        ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'warning', message: 'Lemonade unavailable.' });
      }
    } else {
      logInfo('Generic mode - skipping Lemonade startup');
    }

    // Start RAUX backend
    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Starting GAIA Beta services...' });
    await rauxProcessManager.startRaux();
    
  } catch (err) {
    logError(`Error starting services: ${err && err.toString ? err.toString() : String(err)}`);
    throw err;
  }
};

app.setAppUserModelId("com.squirrel.GaiaBeta.GaiaBeta");

logInfo(`Main process started\nArgs: ${process.argv.join(' ')}\n`);

if (handleSquirrelEvent()) {
  // Squirrel event handled, exit early
  process.exit(0);
}

logInfo(`Install dir: ${getAppInstallDir()}`);
logInfo(`RAUX Version: ${process.env.RAUX_VERSION || 'latest'}`);

const ipcManager = IPCManager.getInstance();
const windowManager = WindowManager.getInstance();

// Set up Lemonade status monitoring
lemonadeStatusMonitor.on('statusChange', (status) => {
  // Update window title with status
  windowManager.updateLemonadeStatus(status);
  
  // Send status to renderer processes via IPC
  ipcManager.sendToAll(IPCChannels.LEMONADE_STATUS, status);
  
  logInfo(`[Main] Lemonade status: ${status.status} (healthy: ${status.isHealthy})`);
});

const createWindow = async (): Promise<void> => {
  try {
    // Check for auto-launch prevention flag and exit if needed
    if (checkAndHandleAutoLaunchPrevention()) {
      ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'success', message: 'Installation successful...' });
      app.quit();
      return;
    }

    windowManager.createMainWindow();

    // Central routing based on installation status
    await routeApplicationFlow();
  } catch (err) {
    logError('Error in createWindow: ' + (err && err.toString ? err.toString() : String(err)));
    throw err;
  }
};

const routeApplicationFlow = async (): Promise<void> => {
  try {
    const isInstalled = await isInstallationComplete();
    
    if (isInstalled) {
      logInfo('Existing installation detected, running startup flow');
      await runStartupFlow();
    } else {
      logInfo('No existing installation detected, running installation flow');
      await runInstallationFlow();
    }
  } catch (err) {
    logError('Error in routing application flow: ' + (err && err.toString ? err.toString() : String(err)));
    throw err;
  }
};

// Startup flow for existing installations
const runStartupFlow = async (): Promise<void> => {
  try {
    // Clear startup messaging - no installation-like messages
    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Verifying environment...' });
    
    // Quick verification without installation messaging
    if (!python.verifyEnvironment()) {
      throw new Error('Python environment verification failed');
    }
    
    if (!raux.verifyInstallation()) {
      throw new Error('RAUX environment verification failed');
    }
    
    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'success', message: 'Environment ready.' });

    await startServices();

    // Start monitoring Lemonade status
    await lemonadeStatusMonitor.startMonitoring();

    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Connecting to GAIA Beta...' });
    pollBackend();
  } catch (err) {
    logError('Startup failed: ' + (err && err.toString ? err.toString() : String(err)));
    ipcManager.sendToAll(IPCChannels.INSTALLATION_ERROR, { type: 'error', message: 'Failed to start GAIA Beta. Check logs.' });
    windowManager.showErrorPage('Failed to start GAIA Beta');
  }
};

// Installation flow for new installations
const runInstallationFlow = async (): Promise<void> => {
  try {
    // Installation-specific messaging
    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Beginning GAIA Beta installation...' });
    
    // Install Python environment with installation messages
    await python.install();

    // Install RAUX with installation messages
    await raux.install();

    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'success', message: 'Installation completed successfully!' });
    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Starting GAIA Beta for the first time...' });

    await startServices();

    // Start monitoring Lemonade status
    await lemonadeStatusMonitor.startMonitoring();

    ipcManager.sendToAll(IPCChannels.INSTALLATION_STATUS, { type: 'info', message: 'Initializing GAIA Beta...' });
    pollBackend();
  } catch (err) {
    logError('Installation failed: ' + (err && err.toString ? err.toString() : String(err)));
    ipcManager.sendToAll(IPCChannels.INSTALLATION_ERROR, { type: 'error', message: 'Installation failed. Check logs.' });
    windowManager.showErrorPage('Installation failed');
  }
};

const pollBackend = () => {
  fetch(RAUX_URL)
    .then(() => {
      ipcManager.sendToAll(IPCChannels.INSTALLATION_COMPLETE, { type: 'success', message: 'GAIA is ready.' });
      ipcManager.sendToAll(IPCChannels.INSTALLATION_COMPLETE, { type: 'success', message: 'Launching GAIA...' });
      windowManager.showMainApp();
    })
    .catch(() => {
      if (rauxProcessManager.getStatus() === 'crashed') {
        windowManager.showErrorPage('GAIA failed to start');
      } else {
        setTimeout(pollBackend, 1000);
      }
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', async () => {
  if (process.platform !== 'darwin') {
    // Stop services before quitting when window is closed
    logInfo('All windows closed - window-all-closed event');
    await stopServices();
    app.quit();
  }
});

// Track if we've already stopped services to avoid double cleanup
let servicesStopped = false;

const stopServices = async () => {
  if (servicesStopped) return;
  
  logInfo('Stopping services...');
  servicesStopped = true;
  
  // Stop status monitoring
  lemonadeStatusMonitor.stopMonitoring();
  
  // Stop both services
  rauxProcessManager.stopRaux();
  await lemonadeProcessManager.stopLemonade();
  
  logInfo('Services stopped');
};

// Handle app quit to gracefully shutdown services
app.on('before-quit', async () => {
  logInfo('Application shutting down - before-quit event');
  await stopServices();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (!windowManager.getMainWindow()) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
