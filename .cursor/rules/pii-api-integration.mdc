---
description: 
globs: 
alwaysApply: false
---
# PII API Integration Guide

## NENNA.ai API Integration

### API Configuration
The PII detection system integrates with NENNA.ai's API for real-time PII detection and masking.

#### API Functions ([pii.ts](mdc:src/lib/apis/pii.ts))
```javascript
export const maskPiiText = async (
  apiKey: string,
  texts: string[],
  unmask: boolean = false,
  returnOriginal: boolean = false,
  knownEntities?: KnownPiiEntity[]  // NEW: Support for known entities
) => {
  // Main API call for PII detection and masking
  // knownEntities provides context for consistent labeling
  // Returns: { text: string[], pii: PiiEntity[][] }
};

export const maskPiiTextWithSession = async (
  apiKey: string,
  sessionId: string,
  texts: string[],
  knownEntities?: KnownPiiEntity[]  // NEW: Support for known entities
) => {
  // Session-based masking with known entities for consistent labeling
};

// NEW: Known entities interface for API
interface KnownPiiEntity {
  id: number;
  label: string;
  name: string;
}
```

### API Response Format
```typescript
interface PiiApiResponse {
  text: string[];      // Processed text (masked/unmasked)
  pii: PiiEntity[][];  // Detected entities per text
}

interface PiiEntity {
  label: string;       // Unique identifier (e.g., "PERSON_1")
  type: string;        // PII type (e.g., "PERSON", "EMAIL")
  text: string;        // Original text content
  start: number;       // Start position in text
  end: number;         // End position in text
}
```

## Session Management

### PiiSessionManager ([pii.ts](mdc:src/lib/utils/pii.ts))
```javascript
class PiiSessionManager {
  private static instance: PiiSessionManager;
  private entities: ExtendedPiiEntity[] = [];
  private apiKey: string = '';
  private conversationStates: Map<string, ConversationPiiState> = new Map(); // NEW

  static getInstance(): PiiSessionManager {
    // Singleton pattern for cross-component state
  }

  // Legacy methods (backward compatibility)
  setEntities(entities: PiiEntity[]): void {
    // Convert PiiEntity[] to ExtendedPiiEntity[] with masking state
  }

  toggleEntityMasking(label: string, occurrenceIndex: number): void {
    // Toggle shouldMask state for specific entity occurrence
  }

  // NEW: Conversation-specific methods
  setConversationEntities(conversationId: string, entities: PiiEntity[], sessionId?: string): void {
    // Store entities per conversation with merging logic
  }

  getConversationEntities(conversationId: string): ExtendedPiiEntity[] {
    // Retrieve entities for specific conversation
  }

  getKnownEntitiesForApi(conversationId: string): KnownPiiEntity[] {
    // Convert conversation entities to API format for known_entities parameter
  }

  loadConversationState(conversationId: string, piiState?: ConversationPiiState): void {
    // Load PII state from localStorage chat data
  }

  getConversationStateForStorage(conversationId: string): ConversationPiiState | null {
    // Get state for saving to localStorage with chat data
  }
}
```

### Extended Entity Format
```typescript
interface ExtendedPiiEntity extends PiiEntity {
  shouldMask: boolean;           // Current masking state
  occurrences: Array<{          // Multiple occurrences in text
    start: number;
    end: number;
    shouldMask: boolean;
  }>;
}

// NEW: Conversation-specific PII state
interface ConversationPiiState {
  entities: ExtendedPiiEntity[];
  sessionId?: string;
  apiKey?: string;
  lastUpdated: number;
}
```

## Detection Workflow

### Input Field Detection
1. **User Input**: Text entered in [RichTextInput.svelte](mdc:src/lib/components/common/RichTextInput.svelte)
2. **Debounced API Call**: 500ms delay to avoid excessive requests
3. **Entity Storage**: Results stored in `PiiSessionManager`
4. **Real-time Highlighting**: TipTap extension applies highlighting
5. **Interactive Overlay**: Mouse events trigger information display

### Response Processing
1. **AI Response**: Contains masked patterns like `[{PERSON_1}]`
2. **Pattern Detection**: [PiiAwareText.svelte](mdc:src/lib/components/chat/Messages/Markdown/PiiAwareText.svelte) detects patterns
3. **Unmasking**: Replaces patterns with original text from session using `unmaskTextWithEntities()` 
4. **Highlighting**: Applies visual highlighting to unmasked entities
5. **Interaction**: Same overlay system as input field

### Unmasking Function ([pii.ts](mdc:src/lib/utils/pii.ts))
```javascript
export function unmaskTextWithEntities(text: string, entities: ExtendedPiiEntity[]): string {
  // FIXED: Correctly extracts base type and ID from entity label
  // Entity label format: "PERSON_1" -> baseType: "PERSON", labelId: "1"
  // Supports multiple masking patterns: [{TYPE_ID}], [TYPE_ID], {TYPE_ID}, TYPE_ID
  // Handles label variations: ORGANIZATION/ORGANISATION/ORGANIZACION
}
```

**Critical Fix**: The unmasking regex was previously building incorrect patterns like `{PERSON_1_1}` instead of `{PERSON_1}`. Fixed by extracting the base type and ID correctly from the entity label format.

## Chat Integration & State Persistence

### Chat Data Storage ([Chat.svelte](mdc:src/lib/components/chat/Chat.svelte))
PII state now persists automatically with chat data:

```javascript
// Loading chat - restore PII state
const loadChat = async (chatId) => {
  const chatContent = await getChatById(chatId);
  if (chatContent?.piiState) {
    PiiSessionManager.getInstance().loadConversationState(chatId, chatContent.piiState);
  }
};

// Saving chat - include PII state
const saveChatHandler = async () => {
  const piiState = PiiSessionManager.getInstance().getConversationStateForStorage(currentChatId);
  await updateChatById(currentChatId, {
    ...chatData,
    piiState  // Automatically included in localStorage
  });
};
```

### Per-Conversation Consistency
- Each chat conversation maintains its own PII entity state
- Entity labels remain consistent across the conversation (PERSON_1 always refers to the same person)
- Known entities are sent to API for consistent labeling on new detections
- State automatically loads/saves with chat data in localStorage

## Error Handling

### API Failures
```javascript
try {
  const response = await maskPiiText(apiKey, [text], false, false);
  // Process successful response
} catch (error) {
  console.error('PII detection failed:', error);
  // Graceful degradation - continue without PII features
} finally {
  isDetectingPii = false;
}
```

### Missing API Key
```javascript
if (!enablePiiDetection || !piiApiKey || !text.trim()) {
  console.log('PII detection skipped');
  return; // Skip processing without errors
}
```

## Performance Considerations

### Debouncing
- **Input Detection**: 500ms debounce prevents excessive API calls
- **Event Handling**: 100-300ms delays prevent UI flickering
- **DOM Updates**: `setTimeout(0)` ensures proper rendering order

### Caching Strategy
- **Session-based**: Entities cached in singleton for conversation duration
- **Text Patterns**: Masked patterns preserved in message content
- **State Persistence**: Masking preferences maintained across interactions

### Memory Management
- **Event Listeners**: Proper cleanup in `onDestroy`
- **Timeouts**: Clear all timeouts to prevent memory leaks
- **DOM References**: Remove stored event handlers on cleanup
